// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	entity "cometScraper/entity"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// CometScraperRepository is an autogenerated mock type for the CometScraperRepository type
type CometScraperRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, cometScraper
func (_m *CometScraperRepository) Create(ctx context.Context, cometScraper *entity.CometScraper) error {
	ret := _m.Called(ctx, cometScraper)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.CometScraper) error); ok {
		r0 = rf(ctx, cometScraper)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, id
func (_m *CometScraperRepository) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Fetch provides a mock function with given fields: ctx
func (_m *CometScraperRepository) Fetch(ctx context.Context) ([]entity.CometScraper, error) {
	ret := _m.Called(ctx)

	var r0 []entity.CometScraper
	if rf, ok := ret.Get(0).(func(context.Context) []entity.CometScraper); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.CometScraper)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *CometScraperRepository) GetByID(ctx context.Context, id string) (entity.CometScraper, error) {
	ret := _m.Called(ctx, id)

	var r0 entity.CometScraper
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.CometScraper); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(entity.CometScraper)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, c
func (_m *CometScraperRepository) Update(ctx context.Context, c *entity.CometScraper) error {
	ret := _m.Called(ctx, c)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.CometScraper) error); ok {
		r0 = rf(ctx, c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewCometScraperRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewCometScraperRepository creates a new instance of CometScraperRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCometScraperRepository(t mockConstructorTestingTNewCometScraperRepository) *CometScraperRepository {
	mock := &CometScraperRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
