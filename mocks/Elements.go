// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	"cometScraper/tools/scraper/app/element"
	mock "github.com/stretchr/testify/mock"
)

// Elements is an autogenerated mock type for the Elements type
type Elements struct {
	mock.Mock
}

// GetButtons provides a mock function with given fields:
func (_m *Elements) GetButtons() element.Buttons {
	ret := _m.Called()

	var r0 element.Buttons
	if rf, ok := ret.Get(0).(func() element.Buttons); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(element.Buttons)
	}

	return r0
}

// GetExperienceElements provides a mock function with given fields:
func (_m *Elements) GetExperienceElements() element.ExperienceElements {
	ret := _m.Called()

	var r0 element.ExperienceElements
	if rf, ok := ret.Get(0).(func() element.ExperienceElements); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(element.ExperienceElements)
	}

	return r0
}

// GetInputs provides a mock function with given fields:
func (_m *Elements) GetInputs() element.Inputs {
	ret := _m.Called()

	var r0 element.Inputs
	if rf, ok := ret.Get(0).(func() element.Inputs); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(element.Inputs)
	}

	return r0
}

// GetResumeSection provides a mock function with given fields:
func (_m *Elements) GetResumeSection() element.ResumeSection {
	ret := _m.Called()

	var r0 element.ResumeSection
	if rf, ok := ret.Get(0).(func() element.ResumeSection); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(element.ResumeSection)
	}

	return r0
}

// GetSkillsElements provides a mock function with given fields:
func (_m *Elements) GetSkillsElements() element.SkillsElements {
	ret := _m.Called()

	var r0 element.SkillsElements
	if rf, ok := ret.Get(0).(func() element.SkillsElements); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(element.SkillsElements)
	}

	return r0
}

// GetUrls provides a mock function with given fields:
func (_m *Elements) GetUrls() element.Urls {
	ret := _m.Called()

	var r0 element.Urls
	if rf, ok := ret.Get(0).(func() element.Urls); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(element.Urls)
	}

	return r0
}

type mockConstructorTestingTNewElements interface {
	mock.TestingT
	Cleanup(func())
}

// NewElements creates a new instance of Elements. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewElements(t mockConstructorTestingTNewElements) *Elements {
	mock := &Elements{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
