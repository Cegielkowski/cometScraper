// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	"cometScraper/tools/scraper/app/applicant"
	"cometScraper/tools/scraper/app/element"
	mock "github.com/stretchr/testify/mock"
)

// Applicant is an autogenerated mock type for the Applicant type
type Applicant struct {
	mock.Mock
}

// Clear provides a mock function with given fields:
func (_m *Applicant) Clear() {
	_m.Called()
}

// GenerateExperienceElementsAndValue provides a mock function with given fields: e
func (_m *Applicant) GenerateExperienceElementsAndValue(e element.ExperienceElements) []element.ElementAndValue {
	ret := _m.Called(e)

	var r0 []element.ElementAndValue
	if rf, ok := ret.Get(0).(func(element.ExperienceElements) []element.ElementAndValue); ok {
		r0 = rf(e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]element.ElementAndValue)
		}
	}

	return r0
}

// GenerateSkillsElementsAndValue provides a mock function with given fields: s
func (_m *Applicant) GenerateSkillsElementsAndValue(s element.SkillsElements) []element.ElementAndValue {
	ret := _m.Called(s)

	var r0 []element.ElementAndValue
	if rf, ok := ret.Get(0).(func(element.SkillsElements) []element.ElementAndValue); ok {
		r0 = rf(s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]element.ElementAndValue)
		}
	}

	return r0
}

// Get provides a mock function with given fields:
func (_m *Applicant) Get() *applicant.Candidate {
	ret := _m.Called()

	var r0 *applicant.Candidate
	if rf, ok := ret.Get(0).(func() *applicant.Candidate); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicant.Candidate)
		}
	}

	return r0
}

// GetDescription provides a mock function with given fields:
func (_m *Applicant) GetDescription() *string {
	ret := _m.Called()

	var r0 *string
	if rf, ok := ret.Get(0).(func() *string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// GetImageUrl provides a mock function with given fields:
func (_m *Applicant) GetImageUrl() *string {
	ret := _m.Called()

	var r0 *string
	if rf, ok := ret.Get(0).(func() *string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// GetJobDesc provides a mock function with given fields: key
func (_m *Applicant) GetJobDesc(key int) *string {
	ret := _m.Called(key)

	var r0 *string
	if rf, ok := ret.Get(0).(func(int) *string); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// GetJobPeriod provides a mock function with given fields: key
func (_m *Applicant) GetJobPeriod(key int) *string {
	ret := _m.Called(key)

	var r0 *string
	if rf, ok := ret.Get(0).(func(int) *string); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// GetJobPeriodCount provides a mock function with given fields: key
func (_m *Applicant) GetJobPeriodCount(key int) *string {
	ret := _m.Called(key)

	var r0 *string
	if rf, ok := ret.Get(0).(func(int) *string); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// GetJobSkill provides a mock function with given fields: key
func (_m *Applicant) GetJobSkill(key int) *string {
	ret := _m.Called(key)

	var r0 *string
	if rf, ok := ret.Get(0).(func(int) *string); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// GetJobTitle provides a mock function with given fields: key
func (_m *Applicant) GetJobTitle(key int) *string {
	ret := _m.Called(key)

	var r0 *string
	if rf, ok := ret.Get(0).(func(int) *string); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// GetName provides a mock function with given fields:
func (_m *Applicant) GetName() *string {
	ret := _m.Called()

	var r0 *string
	if rf, ok := ret.Get(0).(func() *string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// GetRole provides a mock function with given fields:
func (_m *Applicant) GetRole() *string {
	ret := _m.Called()

	var r0 *string
	if rf, ok := ret.Get(0).(func() *string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// GetSkillName provides a mock function with given fields: key
func (_m *Applicant) GetSkillName(key int) *string {
	ret := _m.Called(key)

	var r0 *string
	if rf, ok := ret.Get(0).(func(int) *string); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// GetSkillTime provides a mock function with given fields: key
func (_m *Applicant) GetSkillTime(key int) *string {
	ret := _m.Called(key)

	var r0 *string
	if rf, ok := ret.Get(0).(func(int) *string); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// GetTimeOfExperience provides a mock function with given fields:
func (_m *Applicant) GetTimeOfExperience() *string {
	ret := _m.Called()

	var r0 *string
	if rf, ok := ret.Get(0).(func() *string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// InitializeSkillAndExperience provides a mock function with given fields: lenSkills, lenExperiences
func (_m *Applicant) InitializeSkillAndExperience(lenSkills int, lenExperiences int) {
	_m.Called(lenSkills, lenExperiences)
}

type mockConstructorTestingTNewApplicant interface {
	mock.TestingT
	Cleanup(func())
}

// NewApplicant creates a new instance of Applicant. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewApplicant(t mockConstructorTestingTNewApplicant) *Applicant {
	mock := &Applicant{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
